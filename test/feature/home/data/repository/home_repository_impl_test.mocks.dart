// Mocks generated by Mockito 5.4.6 from annotations
// in cocinando_con_flow/test/feature/home/data/repository/home_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:cocinando_con_flow/src/feature/home/data/models/receta_lista_model.dart'
    as _i4;
import 'package:cocinando_con_flow/src/feature/home/data/services/home_api_service.dart'
    as _i2;
import 'package:cocinando_con_flow/src/shared/domain/entities/entities.dart'
    as _i6;
import 'package:cocinando_con_flow/src/shared/storage/cache/recetas_cache_service.dart'
    as _i5;
import 'package:cocinando_con_flow/src/shared/storage/local/local_favorites_service.dart'
    as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [HomeApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomeApiService extends _i1.Mock implements _i2.HomeApiService {
  MockHomeApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.RecetaListaModel>> obtenerRecetas({
    int? pagina = 1,
    int? limite = 20,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerRecetas,
          [],
          {
            #pagina: pagina,
            #limite: limite,
          },
        ),
        returnValue: _i3.Future<List<_i4.RecetaListaModel>>.value(
            <_i4.RecetaListaModel>[]),
      ) as _i3.Future<List<_i4.RecetaListaModel>>);
}

/// A class which mocks [RecetasCacheService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecetasCacheService extends _i1.Mock
    implements _i5.RecetasCacheService {
  MockRecetasCacheService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.RecetaEntity>?> obtenerRecetasCache(String? key) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerRecetasCache,
          [key],
        ),
        returnValue: _i3.Future<List<_i6.RecetaEntity>?>.value(),
      ) as _i3.Future<List<_i6.RecetaEntity>?>);

  @override
  _i3.Future<void> guardarRecetasCache(
    String? key,
    List<_i6.RecetaEntity>? recetas,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #guardarRecetasCache,
          [
            key,
            recetas,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<List<_i6.RecetaEntity>?> obtenerBusquedaCache(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #obtenerBusquedaCache,
          [query],
        ),
        returnValue: _i3.Future<List<_i6.RecetaEntity>?>.value(),
      ) as _i3.Future<List<_i6.RecetaEntity>?>);

  @override
  _i3.Future<void> guardarBusquedaCache(
    String? query,
    List<_i6.RecetaEntity>? recetas,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #guardarBusquedaCache,
          [
            query,
            recetas,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> limpiarCacheExpirado() => (super.noSuchMethod(
        Invocation.method(
          #limpiarCacheExpirado,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> limpiarTodoCache() => (super.noSuchMethod(
        Invocation.method(
          #limpiarTodoCache,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [LocalFavoritesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalFavoritesService extends _i1.Mock
    implements _i7.LocalFavoritesService {
  MockLocalFavoritesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<Set<String>> obtenerFavoritos() => (super.noSuchMethod(
        Invocation.method(
          #obtenerFavoritos,
          [],
        ),
        returnValue: _i3.Future<Set<String>>.value(<String>{}),
      ) as _i3.Future<Set<String>>);

  @override
  _i3.Future<bool> esFavorito(String? id) => (super.noSuchMethod(
        Invocation.method(
          #esFavorito,
          [id],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> agregar(String? id) => (super.noSuchMethod(
        Invocation.method(
          #agregar,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> quitar(String? id) => (super.noSuchMethod(
        Invocation.method(
          #quitar,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
